	
	//获取文件夹下所有文件
	
	protected void getFile(String path, List<String> list) {
		File file = new File(path);
		File[] array = file.listFiles();

		for (int i = 0; i < array.length; i++) {
			if (array[i].isFile()) {
				list.add(array[i].getPath());
			} else if (array[i].isDirectory()) {
				getFiles(array[i].getPath());
			}
		}
	}
	
	protected List<String> doGetFiles(String inPath){
		List<String> list = new ArrayList<>();
		getFile(inPath, list);
		return list;
	}
  //===============================================
  
  //向文本（path）追加内容
  
  	protected void appendFile(String path, String str) {
		FileWriter fw;
		BufferedWriter bf;
		try {

			fw = new FileWriter(path, true);// 同时创建新文件
			// 创建字符输出流对象
			bf = new BufferedWriter(fw);
			// 创建缓冲字符输出流对象
			bf.append(str + "\r\n");
			bf.flush();
			bf.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	//================================================
	
	
	// 删除文件夹下所有内容
	// param folderPath 文件夹完整绝对路径

	protected void delFolder(String folderPath) {
		try {
			delAllFile(folderPath); // 删除完里面所有内容
			String filePath = folderPath;
			filePath = filePath.toString();
			java.io.File myFilePath = new java.io.File(filePath);
			myFilePath.delete(); // 删除空文件夹
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	//=================================================
	
	//读取文本，返回BufferedReader
	protected static BufferedReader getReader(String inPath, Charset charset) {
		BufferedReader reader = null;
		try {
			reader = new BufferedReader(new InputStreamReader(
					new FileInputStream(new File(inPath)), charset));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			// e.printStackTrace();
			System.out.println("Not Found File");
		}
		return reader;
	}
	//=================================================
	
	//返回写入文本的Writer对象，此函数写出系统默认的字符集
	protected Writer getWriter(String outPath) {
		try {
			writer = new PrintWriter(new File(outPath));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return writer;
	}
	//=================================================
	
	//按照字符串的HashCode输入到文本中
	public void outPutwithHashCode(String outPath, String line) {
		try {
			File outDir = new File(outPath);
			if (outDir.isFile()) {
				System.out.println("请指定正确的输出路径");
				return;
			}
			if (!outDir.isDirectory())
				outDir.mkdir();
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			// e1.printStackTrace();
			System.out.println("输出路径错误");
		}
		String outFile = outPath + "/" + line.hashCode() / 10000;

		appendFile(outFile, line);
	}
	protected void appendFile(String path, String str) {
		FileWriter fw;
		BufferedWriter bf;
		try {
			fw = new FileWriter(path, true);// 同时创建新文件
			// 创建字符输出流对象
			bf = new BufferedWriter(fw);
			// 创建缓冲字符输出流对象
			bf.append(str + "\n");
			bf.flush();
			bf.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	//=================================================
	//获取BufferedWriter
	protected BufferedWriter getBuffWriter(String outPath, Charset charset) {
		BufferedWriter writer = null;
		try {
			writer = new BufferedWriter(new OutputStreamWriter(
					new FileOutputStream(new File(outPath)),
					Charset.defaultCharset()));

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return writer;
	}
	//=================================================
	//获取字符集
	protected Charset getCharset(String charsetName) {
		return Charset.forName(charsetName);
	}
	//=================================================

	public void TransformEncoding(String inPath, String outPath){
		List<String> filelist;
		String curCode, outFilePath, dir, fileName, outDir;
		BufferedReader reader;
		BufferedWriter writer;
		File file;
		int num = 1;
		filelist = getAllFiles(inPath);
		for(String filePath : filelist){
			curCode = getFileChart(filePath);
			file = new File(filePath);
			dir = file.getParent().substring(file.getParent().toString().indexOf("inPut") + 6);
			System.out.println(dir);
			fileName = file.getName();
			System.out.println(fileName);
			outDir = outPath + "/" + dir;
			System.out.println(outDir);
			file = new File(outDir);
			if(!file.exists()){
				file.mkdirs();
			}
			
			outFilePath = outDir + "/" + fileName;
			System.out.println(outFilePath);
			writer = getBuffWriter(outFilePath, Charset.defaultCharset());
			reader = getReader(filePath, Charset.forName(curCode));
			System.out.println(num + "/" + filelist.size());
			num++;
			try {
				for(String line; (line = reader.readLine()) != null;){
					writer.write(line);
					writer.flush();
					writer.newLine();
				}
				reader.close();
				writer.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		System.out.println("ok");
	}
	//=================================================
